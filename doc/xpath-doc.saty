@require: stdjareport
@require: itemize
@require: list
@require: annot
@require: color
@require: math

@import: ../src/xpath
@import: ../src/util
@import: ../src/visualizer

let-inline ctx \test-path cmd =
    let gs = XPathVisualizer.(
        cmd |> from-path
            |> show-fill
            |> show-curve
            |> show-handles
            |> show-intersections 1pt
            % |> show-element-bboxes
            |> draw
    ) in
    let ((x1, y1), (x2, y2)) =
        match gs with
        | [] -> ((0pt, 0pt), (0pt, 0pt))
        | g::gs ->
              gs |> List.fold-left (fun ret g -> (
                  let bbox = get-graphics-bbox g in
                  XPathUtil.concat-bbox ret bbox
              )) (get-graphics-bbox g)
    in
    let w = x2 -' x1 in
    let h = y2 -' y1 in
    inline-graphics w h 0pt (fun (x, y) -> (
        gs |> List.map( shift-graphics (x -' x1, y -' y1))
    ))

in

let () = XPathCurve.run-debug () in
document (|
  title = {XPath パッケージ};
  author = {The XPath Contributors};
|) '<
    +p {
        \test-path(
            XPath.(
                let p1 = start-path (0cm, -4cm)
                    |> bezier-to (5cm, -4cm) (5cm, 4cm) (0cm, 4cm)
                    |> terminate-path in
                let p2 = start-path (1cm, -4cm)
                    |> line-to (1cm, 4cm)
                    |> terminate-path in
                unite-path p1 p2
            )
        );
        % \test-path(
        %     XPath.(
        %         let p1 = start-path (-2cm, 0cm)
        %             |> bezier-to (-4cm, 2cm) (4cm, 2cm) (4cm, 0cm)
        %             |> terminate-path in
        %         let p2 = start-path (-2.4cm, -0.5cm)
        %             |> line-to (-2.4cm, 2.5cm)
        %             |> terminate-path in
        %         let p3 = start-path (-1.5cm, 1cm)
        %             |> bezier-to (-1cm, 4cm) (1cm, -1cm) (1.5cm, 2cm)
        %             |> terminate-path in
        %         unite-path (unite-path p1 p2) p3
        %     )
        % );
        \test-path(
            XPath.(
                let p1 =
                    start-path (0pt, 0pt)
                    |> line-to (3cm, 3cm)
                    %start-path (3cm, 3cm)
                    |> bezier-to (6cm, 6cm) (3cm, 0cm) (9cm, 6cm)
                    %|> bezier-to (10cm, 9cm) (3cm, 0cm) (5cm, -2cm)
                    %|> close-with-bezier (4cm, -3cm) (1cm, -1cm)
                    |> terminate-path
                in
                let p3 = start-path (3cm, 3cm)
                    |> line-to (0cm, 0cm)
                    |> line-to (9cm, 6cm)
                    |> bezier-to (6cm, 6cm) (3cm, 0cm) (9cm, 6cm)
                    |> terminate-path
                in
                p3
                % let p2 = start-path (1cm, 2.5cm)
                %     |> line-to (8cm, 2.5cm)
                %     |> terminate-path in
                % p2
                %unite-path p1 p2
            )
        );
        % \test-path(
        %     XPath.(
        %         start-path (5.3mm, 1mm)
        %             |> bezier-to (5.3mm, 1mm) (-2mm, 4.7mm) (1.2mm, 13.2mm)
        %             |> bezier-to (4.5mm, 21.6mm) (7.3mm, 3.6mm) (13.5mm, 11.1mm)
        %             |> bezier-to (19.7mm, 18.7mm) (3.3mm, 15.6mm) (2.4mm, 10.6mm)
        %             |> bezier-to (1.5mm, 5.6mm) (39mm, 23.2mm) (29.1mm, 25.1mm)
        %             |> bezier-to (19.12mm, 26.9mm) (11.1mm, 25.8mm) (11.1mm, 25.8mm)
        %             |> line-to (28.3mm, 4.1mm)
        %             |> line-to (14.1mm, 4.8mm)
        %             |> line-to (33.3mm, 32.1mm)
        %             |> line-to (1.9mm, 7.8mm)
        %             |> bezier-to (1.9mm, 7.8mm) (25.7mm, -7.7mm) (21.2mm, -6.7mm)
        %             |> bezier-to (16.8mm, 21.3mm) (23.1mm, 21.7mm) (34.3mm, 21.9mm)
        %             |> bezier-to (45.4mm, 22mm) (14.9mm, -2.2mm) (5.3mm, 1mm)
        %             |> close-with-line
        %     )
        % );

    }
>
